#!/bin/bash

# Colors
BLUE='\033[0;38;5;27m'
CYAN='\033[0;38;5;45m'
GREEN='\033[0;38;5;46m'
YELLOW='\033[0;38;5;226m'
RED='\033[0;38;5;196m'
PURPLE='\033[0;38;5;165m'
ORANGE='\033[0;38;5;208m'
NC='\033[0m' # No Color

# System Information
ISP=$(cat /etc/xray/isp 2>/dev/null || echo "Unknown ISP")
CITY=$(cat /etc/xray/city 2>/dev/null || echo "Unknown City")
IPVPS=$(curl -s ipv4.icanhazip.com || echo "Unknown")
DOMAIN=$(cat /etc/xray/domain 2>/dev/null || hostname -d 2>/dev/null || echo "No domain")
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')
LOADCPU=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
OS_INFO=$(source /etc/os-release && echo "$PRETTY_NAME")
CORE=$(nproc)
DATEVPS=$(date +'%d/%m/%Y')
TIMEZONE=$(date +'%H:%M:%S')
UPTIME=$(uptime -p | cut -d " " -f 2-)
PUBLIC_IP=$(curl -s ifconfig.me || echo "Unknown")
CITY=$(curl -s ipinfo.io/$PUBLIC_IP | jq -r '.city // "Unknown"')

# Gradient Text
gradient() {
    local text=$1
    local length=${#text}
    local output=""
    for (( i=0; i<length; i++ )); do
        char=${text:$i:1}
        color_code=$(( 27 + (i * 18 / length) ))
        output+="\033[38;5;${color_code}m${char}"
    done
    echo -ne "${output}${NC}"
}

# Enhanced VPN Service Status Check
check_vpn_service() {
    local service_name=$1
    local port=$2
    local protocol=$3
    
    # Check if service is installed
    if ! command -v $service_name >/dev/null 2>&1 && ! systemctl list-unit-files | grep -q $service_name; then
        echo -e "${RED}● NOT INSTALLED${NC}"
        return
    fi

    # Check service status
    case $service_name in
        "pptpd")
            # First try systemctl, then check process
            if systemctl is-active --quiet $service_name 2>/dev/null || pgrep pptpd >/dev/null; then
                service_status="${GREEN}● RUNNING${NC}"
            else
                service_status="${RED}● STOPPED${NC}"
            fi
            
            # Check port
            if ss -tuln | grep -q ":$port "; then
                port_status="${GREEN}✓${NC}"
            else
                port_status="${RED}✗${NC}"
                # Special check for PPTP which uses GRE protocol (not TCP/UDP)
                if ping -c 1 -w 1 $PUBLIC_IP | grep -q "ttl"; then
                    port_status="${GREEN}✓ (GRE)${NC}"
                    service_status="${GREEN}● RUNNING${NC}"
                fi
            fi
            ;;
            
        "accel-ppp")
            if systemctl is-active --quiet $service_name 2>/dev/null; then
                service_status="${GREEN}● RUNNING${NC}"
            else
                service_status="${RED}● STOPPED${NC}"
            fi
            
            if ss -tuln | grep -q ":$port "; then
                port_status="${GREEN}✓${NC}"
            else
                port_status="${RED}✗${NC}"
            fi
            ;;
            
        "xl2tpd")
            if systemctl is-active --quiet $service_name 2>/dev/null; then
                service_status="${GREEN}● RUNNING${NC}"
            else
                service_status="${RED}● STOPPED${NC}"
            fi
            
            if ss -tuln | grep -q ":$port "; then
                port_status="${GREEN}✓${NC}"
            else
                port_status="${RED}✗${NC}"
                # L2TP might be running but not showing in ss due to encapsulation
                if ipsec status | grep -q "INSTALLED"; then
                    port_status="${GREEN}✓ (IPSec)${NC}"
                    service_status="${GREEN}● RUNNING${NC}"
                fi
            fi
            ;;
            
        *)
            service_status="${RED}● UNKNOWN SERVICE${NC}"
            port_status="${YELLOW}?${NC}"
            ;;
    esac
    
    echo -e "$service_status (Port $port: $port_status)"
}

# Path
CHAP_FILE="/home/sstp/sstp_account"
EXPIRY_FILE="/home/sstp/account_expiry"
LOG_FILE="/var/log/vpn_users.log"

# Display Header
display_header() {
    clear
    echo -e "${PURPLE}╔════════════════════════════════════════════════════════════════════╗"
    gradient "                H O K A G E   V P N   M A N A G E R  P R O               "
    echo -e "\n${PURPLE}╚════════════════════════════════════════════════════════════════════╝${NC}"
    
    # System Information Display
    echo -e "${CYAN}┌─────────────────────── SYSTEM INFORMATION ───────────────────────┐"
    echo -e "${CYAN}│ ${YELLOW}🖥️ OS          : ${OS_INFO}"
    echo -e "${CYAN}│ ${YELLOW}🏢 ISP         : ${ISP} (${CITY})"
    echo -e "${CYAN}│ ${YELLOW}🌐 IP Address  : ${PUBLIC_IP} (${CITY})"
    echo -e "${CYAN}│ ${YELLOW}🔌 Domain      : ${DOMAIN}"
    echo -e "${CYAN}│ ${YELLOW}📅 Date        : ${DATEVPS} | 🕒 Time: ${TIMEZONE}"
    echo -e "${CYAN}│ ${YELLOW}⏱️ Uptime      : ${UPTIME}"
    echo -e "${CYAN}│ ${YELLOW}💾 RAM Usage   : ${USAGERAM}MB / ${RAM}MB (${MEMOFREE})"
    echo -e "${CYAN}│ ${YELLOW}⚡ CPU Load    : ${LOADCPU} | Cores: ${CORE}"
    echo -e "${CYAN}└──────────────────────────────────────────────────────────────────┘${NC}"
    echo -e "${CYAN}┌─────────────────────── VPN SERVICE STATUS ───────────────────────┐"
    echo -e "${CYAN}│ ${YELLOW}🔌 PPTP Service : $(check_vpn_service pptpd 1723 tcp)"
    echo -e "${CYAN}│ ${YELLOW}🌐 SSTP Service : $(check_vpn_service accel-ppp 443 tcp)"
    echo -e "${CYAN}│ ${YELLOW}🛡️ L2TP Service : $(check_vpn_service xl2tpd 1701 udp)"
    echo -e "${CYAN}└──────────────────────────────────────────────────────────────────┘${NC}"
    echo ""
}

# Calculate expiry
calculate_expiry() {
    local period=$1
    if [[ $period == *"day"* ]]; then
        days=${period%% *}
        date -d "+${days} days" +"%Y-%m-%d"
    elif [[ $period == *"month"* ]]; then
        months=${period%% *}
        date -d "+${months} months" +"%Y-%m-%d"
    elif [[ $period == *"year"* ]]; then
        years=${period%% *}
        date -d "+${years} years" +"%Y-%m-%d"
    else
        date -d "+1 month" +"%Y-%m-%d"
    fi
}

# VPN Service Management
manage_vpn_service() {
    local service=$1
    local action=$2
    
    case $service in
        "pptpd")
            if [[ $action == "restart" ]]; then
                systemctl restart pptpd 2>/dev/null || service pptpd restart 2>/dev/null
                # Ensure GRE protocol is allowed
                iptables -I INPUT -p gre -j ACCEPT
            fi
            ;;
        "accel-ppp")
            systemctl $action accel-ppp 2>/dev/null
            ;;
        "xl2tpd")
            systemctl $action xl2tpd 2>/dev/null
            # Restart IPSec if L2TP is being restarted
            if [[ $action == "restart" ]]; then
                systemctl restart ipsec 2>/dev/null
            fi
            ;;
    esac
}

# Main Menu
while true; do
    display_header
    echo -e "${CYAN}┌────────────────────────────────────────────────────────────────────┐"
    echo -e "${CYAN}│ ${YELLOW}📋 MAIN MENU:${NC}                                                         │"
    echo -e "${CYAN}│                                                                    │"
    echo -e "${CYAN}│ ${BLUE}1. ${YELLOW}➕ Create new user account${NC}                                     │"
    echo -e "${CYAN}│ ${BLUE}2. ${YELLOW}➖ Delete user account${NC}                                        │"
    echo -e "${CYAN}│ ${BLUE}3. ${YELLOW}👥 View all users${NC}                                            │"
    echo -e "${CYAN}│ ${BLUE}4. ${YELLOW}🔄 Restart VPN Services${NC}                                      │"
    echo -e "${CYAN}│ ${BLUE}5. ${YELLOW}🔧 Fix VPN Services${NC}                                          │"
    echo -e "${CYAN}│ ${BLUE}0. ${YELLOW}🚪 Exit${NC}                                                      │"
    echo -e "${CYAN}└────────────────────────────────────────────────────────────────────┘${NC}"
    echo ""
    
    read -rp "$(echo -e "${YELLOW}▶ Select option [0-5]: ${NC}")" choice

    case "$choice" in
        1)
            read -rp "$(echo -e "${BLUE}▶ Enter username: ${NC}")" user
            read -rsp "$(echo -e "${BLUE}▶ Enter password: ${NC}")" pass
            echo
            read -rp "$(echo -e "${YELLOW}▶ Expiry (e.g. '7 days', '1 month'): ${NC}")" expiry
            expiry_date=$(calculate_expiry "$expiry")
            echo "$user * $pass *" >> "$CHAP_FILE"
            echo "$user $expiry_date" >> "$EXPIRY_FILE"
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Created user: $user (Expiry: $expiry_date)" >> "$LOG_FILE"
            echo -e "${GREEN}✔ User $user added. Expiry: $expiry_date${NC}"
            sleep 1
            ;;
        2)
            read -rp "$(echo -e "${BLUE}▶ Enter username to delete: ${NC}")" user
            if grep -q "^$user " "$CHAP_FILE"; then
                sed -i "/^$user /d" "$CHAP_FILE"
                sed -i "/^$user /d" "$EXPIRY_FILE"
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Deleted user: $user" >> "$LOG_FILE"
                echo -e "${GREEN}✔ User $user deleted${NC}"
            else
                echo -e "${RED}✖ User $user not found${NC}"
            fi
            sleep 1
            ;;
        3)
            echo -e "${CYAN}┌──────────────────── USERS ─────────────────────┐"
            printf "%-20s %-20s\n" "Username" "Expiry Date"
            echo "--------------------------------------------------"
            if [ -f "$EXPIRY_FILE" ]; then
                while read -r line; do
                    uname=$(echo "$line" | awk '{print $1}')
                    exp=$(echo "$line" | awk '{print $2}')
                    if [ "$(date -d "$exp" +%s)" -lt "$(date +%s)" ]; then
                        printf "${RED}%-20s %-20s (EXPIRED)${NC}\n" "$uname" "$exp"
                    else
                        printf "%-20s %-20s\n" "$uname" "$exp"
                    fi
                done < "$EXPIRY_FILE"
            else
                echo -e "${RED}No users found${NC}"
            fi
            echo -e "${CYAN}└──────────────────────────────────────────────────┘${NC}"
            read -rp "$(echo -e "${YELLOW}▶ Press Enter to return...${NC}")"
            ;;
        4)
            echo -e "${YELLOW}Restarting VPN services...${NC}"
            manage_vpn_service pptpd restart
            manage_vpn_service accel-ppp restart
            manage_vpn_service xl2tpd restart
            echo -e "${GREEN}✔ VPN services restarted successfully${NC}"
            sleep 2
            ;;
        5)
            echo -e "${YELLOW}Attempting to fix VPN services...${NC}"
            
            # Fix PPTP
            if ! pgrep pptpd >/dev/null; then
                echo -e "${BLUE}▶ Starting PPTP service...${NC}"
                manage_vpn_service pptpd start
                iptables -I INPUT -p gre -j ACCEPT
            fi
            
            # Fix L2TP
            if ! systemctl is-active --quiet xl2tpd; then
                echo -e "${BLUE}▶ Starting L2TP/IPSec services...${NC}"
                manage_vpn_service xl2tpd start
                systemctl start ipsec 2>/dev/null
                iptables -I INPUT -p udp --dport 500 -j ACCEPT
                iptables -I INPUT -p udp --dport 4500 -j ACCEPT
            fi
            
            echo -e "${GREEN}✔ VPN service fixes attempted${NC}"
            sleep 2
            ;;
        0)
            echo -e "${BLUE}👋 Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}⚠ Invalid option! Please select between 0-5.${NC}"
            sleep 1
            ;;
    esac
done

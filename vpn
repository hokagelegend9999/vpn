#!/bin/bash

# Colors
BLUE='\033[0;38;5;27m'
CYAN='\033[0;38;5;45m'
GREEN='\033[0;38;5;46m'
YELLOW='\033[0;38;5;226m'
RED='\033[0;38;5;196m'
PURPLE='\033[0;38;5;165m'
ORANGE='\033[0;38;5;208m'
NC='\033[0m' # No Color

# System Information
ISP=$(cat /etc/xray/isp 2>/dev/null || echo "Unknown ISP")
CITY=$(cat /etc/xray/city 2>/dev/null || echo "Unknown City")
IPVPS=$(curl -s ipv4.icanhazip.com || echo "Unknown")
DOMAIN=$(cat /etc/xray/domain 2>/dev/null || hostname -d 2>/dev/null || echo "No domain")
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')
LOADCPU=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
OS_INFO=$(source /etc/os-release && echo "$PRETTY_NAME")
CORE=$(nproc)
DATEVPS=$(date +'%d/%m/%Y')
TIMEZONE=$(date +'%H:%M:%S')
UPTIME=$(uptime -p | cut -d " " -f 2-)
PUBLIC_IP=$(curl -s ifconfig.me || echo "Unknown")
CITY=$(curl -s ipinfo.io/$PUBLIC_IP | jq -r '.city // "Unknown"')

# Gradient Text
gradient() {
    local text=$1
    local length=${#text}
    local output=""
    for (( i=0; i<length; i++ )); do
        char=${text:$i:1}
        color_code=$(( 27 + (i * 18 / length) ))
        output+="\033[38;5;${color_code}m${char}"
    done
    echo -ne "${output}${NC}"
}

# Enhanced VPN Service Status Check
check_vpn_service() {
    local service_name=$1
    local port=$2
    local protocol=$3
    
    # Check if service is installed
    if ! command -v $service_name >/dev/null 2>&1 && ! systemctl list-unit-files | grep -q $service_name; then
        echo -e "${RED}● NOT INSTALLED${NC}"
        return
    fi

    # Check service status
    case $service_name in
        "pptpd")
            if systemctl is-active --quiet $service_name 2>/dev/null || pgrep pptpd >/dev/null; then
                service_status="${GREEN}● RUNNING${NC}"
            else
                service_status="${RED}● STOPPED${NC}"
            fi
            
            if ss -tuln | grep -q ":$port "; then
                port_status="${GREEN}✓${NC}"
            else
                port_status="${RED}✗${NC}"
                if ping -c 1 -w 1 $PUBLIC_IP | grep -q "ttl"; then
                    port_status="${GREEN}✓ (GRE)${NC}"
                    service_status="${GREEN}● RUNNING${NC}"
                fi
            fi
            ;;
            
        "accel-ppp")
            if systemctl is-active --quiet $service_name 2>/dev/null; then
                service_status="${GREEN}● RUNNING${NC}"
            else
                service_status="${RED}● STOPPED${NC}"
            fi
            
            if ss -tuln | grep -q ":$port "; then
                port_status="${GREEN}✓${NC}"
            else
                port_status="${RED}✗${NC}"
            fi
            ;;
            
        "xl2tpd")
            if systemctl is-active --quiet $service_name 2>/dev/null; then
                service_status="${GREEN}● RUNNING${NC}"
            else
                service_status="${RED}● STOPPED${NC}"
            fi
            
            if ss -tuln | grep -q ":$port "; then
                port_status="${GREEN}✓${NC}"
            else
                port_status="${RED}✗${NC}"
                if ipsec status | grep -q "INSTALLED"; then
                    port_status="${GREEN}✓ (IPSec)${NC}"
                    service_status="${GREEN}● RUNNING${NC}"
                fi
            fi
            ;;
            
        *)
            service_status="${RED}● UNKNOWN SERVICE${NC}"
            port_status="${YELLOW}?${NC}"
            ;;
    esac
    
    echo -e "$service_status (Port $port: $port_status)"
}

# Paths
CHAP_FILE="/etc/ppp/chap-secrets"
EXPIRY_FILE="/etc/ppp/account_expiry"
LOG_FILE="/var/log/vpn_users.log"
SSTP_CONFIG="/etc/accel-ppp.conf"

# Create necessary files if they don't exist
[ -f "$CHAP_FILE" ] || touch "$CHAP_FILE"
[ -f "$EXPIRY_FILE" ] || touch "$EXPIRY_FILE"
[ -f "$LOG_FILE" ] || touch "$LOG_FILE"
chmod 600 "$CHAP_FILE" "$EXPIRY_FILE"

# Display Header
display_header() {
    clear
    echo -e "${PURPLE}╔════════════════════════════════════════════════════════════════════╗"
    gradient "                H O K A G E   V P N   M A N A G E R  P R O               "
    echo -e "\n${PURPLE}╚════════════════════════════════════════════════════════════════════╝${NC}"
    
    # System Information Display
    echo -e "${CYAN}┌─────────────────────── SYSTEM INFORMATION ───────────────────────┐"
    echo -e "${CYAN}│ ${YELLOW}🖥️ OS          : ${OS_INFO}"
    echo -e "${CYAN}│ ${YELLOW}🏢 ISP         : ${ISP} (${CITY})"
    echo -e "${CYAN}│ ${YELLOW}🌐 IP Address  : ${PUBLIC_IP} (${CITY})"
    echo -e "${CYAN}│ ${YELLOW}🔌 Domain      : ${DOMAIN}"
    echo -e "${CYAN}│ ${YELLOW}📅 Date        : ${DATEVPS} | 🕒 Time: ${TIMEZONE}"
    echo -e "${CYAN}│ ${YELLOW}⏱️ Uptime      : ${UPTIME}"
    echo -e "${CYAN}│ ${YELLOW}💾 RAM Usage   : ${USAGERAM}MB / ${RAM}MB (${MEMOFREE})"
    echo -e "${CYAN}│ ${YELLOW}⚡ CPU Load    : ${LOADCPU} | Cores: ${CORE}"
    echo -e "${CYAN}└──────────────────────────────────────────────────────────────────┘${NC}"
    echo -e "${CYAN}┌─────────────────────── VPN SERVICE STATUS ───────────────────────┐"
    echo -e "${CYAN}│ ${YELLOW}🔌 PPTP Service : $(check_vpn_service pptpd 1723 tcp)"
    echo -e "${CYAN}│ ${YELLOW}🌐 SSTP Service : $(check_vpn_service accel-ppp 4433 tcp)"
    echo -e "${CYAN}│ ${YELLOW}🛡️ L2TP Service : $(check_vpn_service xl2tpd 1701 udp)"
    echo -e "${CYAN}└──────────────────────────────────────────────────────────────────┘${NC}"
    echo ""
}

# Calculate expiry
calculate_expiry() {
    local period=$1
    if [[ $period == *"day"* ]]; then
        days=${period%% *}
        date -d "+${days} days" +"%Y-%m-%d"
    elif [[ $period == *"month"* ]]; then
        months=${period%% *}
        date -d "+${months} months" +"%Y-%m-%d"
    elif [[ $period == *"year"* ]]; then
        years=${period%% *}
        date -d "+${years} years" +"%Y-%m-%d"
    else
        date -d "+1 month" +"%Y-%m-%d"
    fi
}

# VPN Service Management
manage_vpn_service() {
    local service=$1
    local action=$2
    
    case $service in
        "pptpd")
            if [[ $action == "restart" ]]; then
                systemctl restart pptpd 2>/dev/null || service pptpd restart 2>/dev/null
                iptables -I INPUT -p gre -j ACCEPT
            fi
            ;;
        "accel-ppp")
            systemctl $action accel-ppp 2>/dev/null
            ;;
        "xl2tpd")
            systemctl $action xl2tpd 2>/dev/null
            if [[ $action == "restart" ]]; then
                systemctl restart ipsec 2>/dev/null
            fi
            ;;
    esac
}

# Create VPN User
create_vpn_user() {
    while true; do
        read -rp "$(echo -e "${BLUE}▶ Enter username: ${NC}")" user
        if grep -q "^$user " "$CHAP_FILE"; then
            echo -e "${RED}✖ Username already exists!${NC}"
            continue
        fi
        break
    done
    
    read -rsp "$(echo -e "${BLUE}▶ Enter password: ${NC}")" pass
    echo
    read -rsp "$(echo -e "${BLUE}▶ Confirm password: ${NC}")" pass_confirm
    echo
    
    if [ "$pass" != "$pass_confirm" ]; then
        echo -e "${RED}✖ Passwords do not match!${NC}"
        return 1
    fi
    
    while true; do
        read -rp "$(echo -e "${YELLOW}▶ Expiry period (e.g. '7 days', '1 month', '1 year'): ${NC}")" expiry
        expiry_date=$(calculate_expiry "$expiry")
        
        echo -e "${CYAN}┌──────────────────────────────────────────────────────┐"
        echo -e "${CYAN}│ ${GREEN}✓ New VPN Account Details:${NC}"
        echo -e "${CYAN}│ ${YELLOW}Username: ${GREEN}$user${NC}"
        echo -e "${CYAN}│ ${YELLOW}Password: ${GREEN}${pass:0:1}*****${pass: -1}${NC}"
        echo -e "${CYAN}│ ${YELLOW}Expiry Date: ${GREEN}$expiry_date${NC}"
        echo -e "${CYAN}└──────────────────────────────────────────────────────┘${NC}"
        
        read -rp "$(echo -e "${YELLOW}▶ Confirm creation? [y/N]: ${NC}")" confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            echo "$user * $pass *" >> "$CHAP_FILE"
            echo "$user $expiry_date" >> "$EXPIRY_FILE"
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Created user: $user (Expiry: $expiry_date)" >> "$LOG_FILE"
            echo -e "${GREEN}✔ User $user created successfully!${NC}"
            
            # Restart services to apply changes
            manage_vpn_service accel-ppp restart
            return 0
        else
            echo -e "${YELLOW}✖ User creation cancelled${NC}"
            return 1
        fi
    done
}

# Delete VPN User
delete_vpn_user() {
    echo -e "${CYAN}┌────────────────────── ACTIVE USERS ──────────────────────┐"
    printf "%-20s %-20s\n" "Username" "Expiry Date"
    echo "--------------------------------------------------"
    if [ -s "$EXPIRY_FILE" ]; then
        while read -r line; do
            uname=$(echo "$line" | awk '{print $1}')
            exp=$(echo "$line" | awk '{print $2}')
            if [ "$(date -d "$exp" +%s)" -lt "$(date +%s)" ]; then
                printf "${RED}%-20s %-20s (EXPIRED)${NC}\n" "$uname" "$exp"
            else
                printf "%-20s %-20s\n" "$uname" "$exp"
            fi
        done < "$EXPIRY_FILE"
    else
        echo -e "${RED}No users found${NC}"
    fi
    echo -e "${CYAN}└──────────────────────────────────────────────────────────┘${NC}"
    
    read -rp "$(echo -e "${YELLOW}▶ Enter username to delete: ${NC}")" user
    
    if grep -q "^$user " "$CHAP_FILE"; then
        read -rp "$(echo -e "${RED}⚠ Are you sure you want to delete $user? [y/N]: ${NC}")" confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            sed -i "/^$user /d" "$CHAP_FILE"
            sed -i "/^$user /d" "$EXPIRY_FILE"
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Deleted user: $user" >> "$LOG_FILE"
            echo -e "${GREEN}✔ User $user deleted successfully${NC}"
            
            # Restart services to apply changes
            manage_vpn_service accel-ppp restart
        else
            echo -e "${YELLOW}✖ User deletion cancelled${NC}"
        fi
    else
        echo -e "${RED}✖ User $user not found${NC}"
    fi
}

# View All Users
view_all_users() {
    echo -e "${CYAN}┌─────────────────────── VPN USERS ───────────────────────┐"
    printf "%-20s %-20s %-10s\n" "Username" "Expiry Date" "Status"
    echo "------------------------------------------------------------"
    
    if [ -s "$EXPIRY_FILE" ]; then
        current_date=$(date +%s)
        
        while read -r line; do
            uname=$(echo "$line" | awk '{print $1}')
            exp=$(echo "$line" | awk '{print $2}')
            exp_date=$(date -d "$exp" +%s)
            
            if [ "$exp_date" -lt "$current_date" ]; then
                status="${RED}EXPIRED${NC}"
            else
                days_left=$(( (exp_date - current_date) / 86400 ))
                if [ "$days_left" -le 7 ]; then
                    status="${YELLOW}SOON${NC} (${days_left}d)"
                else
                    status="${GREEN}ACTIVE${NC}"
                fi
            fi
            
            printf "%-20s %-20s %b\n" "$uname" "$exp" "$status"
        done < "$EXPIRY_FILE"
    else
        echo -e "${RED}No VPN users found${NC}"
    fi
    
    total_users=$(wc -l < "$EXPIRY_FILE" 2>/dev/null || echo 0)
    active_users=$(grep -v "EXPIRED" "$EXPIRY_FILE" | wc -l 2>/dev/null || echo 0)
    
    echo -e "${CYAN}├──────────────────────────────────────────────────────────┤"
    echo -e "${CYAN}│ ${YELLOW}Total Users: ${GREEN}$total_users${NC} | ${YELLOW}Active Users: ${GREEN}$active_users${NC}"
    echo -e "${CYAN}└──────────────────────────────────────────────────────────┘${NC}"
    
    read -rp "$(echo -e "${YELLOW}▶ Press Enter to return...${NC}")"
}

# Restart VPN Services
restart_vpn_services() {
    echo -e "${YELLOW}Restarting all VPN services...${NC}"
    
    echo -e "${BLUE}▶ Restarting PPTP...${NC}"
    manage_vpn_service pptpd restart
    
    echo -e "${BLUE}▶ Restarting SSTP...${NC}"
    manage_vpn_service accel-ppp restart
    
    echo -e "${BLUE}▶ Restarting L2TP/IPSec...${NC}"
    manage_vpn_service xl2tpd restart
    
    echo -e "${GREEN}✔ All VPN services restarted successfully${NC}"
    sleep 2
}

# Fix VPN Services
fix_vpn_services() {
    echo -e "${YELLOW}Running VPN service diagnostics and repairs...${NC}"
    
    # Check and fix PPTP
    if ! pgrep pptpd >/dev/null; then
        echo -e "${BLUE}▶ Starting PPTP service...${NC}"
        manage_vpn_service pptpd start
        iptables -I INPUT -p gre -j ACCEPT
    fi
    
    # Check and fix SSTP
    if ! systemctl is-active --quiet accel-ppp; then
        echo -e "${BLUE}▶ Starting SSTP service...${NC}"
        manage_vpn_service accel-ppp start
    fi
    
    # Check and fix L2TP/IPSec
    if ! systemctl is-active --quiet xl2tpd; then
        echo -e "${BLUE}▶ Starting L2TP/IPSec services...${NC}"
        manage_vpn_service xl2tpd start
        systemctl start ipsec 2>/dev/null
        iptables -I INPUT -p udp --dport 500 -j ACCEPT
        iptables -I INPUT -p udp --dport 4500 -j ACCEPT
    fi
    
    # Verify services
    echo -e "${CYAN}┌────────────────── SERVICE STATUS AFTER FIX ─────────────────┐"
    echo -e "${CYAN}│ ${YELLOW}🔌 PPTP Service : $(check_vpn_service pptpd 1723 tcp)"
    echo -e "${CYAN}│ ${YELLOW}🌐 SSTP Service : $(check_vpn_service accel-ppp 4433 tcp)"
    echo -e "${CYAN}│ ${YELLOW}🛡️ L2TP Service : $(check_vpn_service xl2tpd 1701 udp)"
    echo -e "${CYAN}└────────────────────────────────────────────────────────────┘${NC}"
    
    echo -e "${GREEN}✔ VPN service repairs completed${NC}"
    sleep 2
}

# Main Menu
while true; do
    display_header
    echo -e "${CYAN}┌─────────────────────── MAIN MENU ────────────────────────┐"
    echo -e "${CYAN}│                                                          │"
    echo -e "${CYAN}│ ${BLUE}1. ${YELLOW}➕ Create new VPN user account${NC}                   │"
    echo -e "${CYAN}│ ${BLUE}2. ${YELLOW}➖ Delete VPN user account${NC}                      │"
    echo -e "${CYAN}│ ${BLUE}3. ${YELLOW}👥 View all VPN users${NC}                          │"
    echo -e "${CYAN}│ ${BLUE}4. ${YELLOW}🔄 Restart all VPN services${NC}                     │"
    echo -e "${CYAN}│ ${BLUE}5. ${YELLOW}🔧 Fix VPN services${NC}                            │"
    echo -e "${CYAN}│ ${BLUE}0. ${YELLOW}🚪 Exit${NC}                                       │"
    echo -e "${CYAN}└──────────────────────────────────────────────────────────┘${NC}"
    echo ""
    
    read -rp "$(echo -e "${YELLOW}▶ Select option [0-5]: ${NC}")" choice

    case "$choice" in
        1) create_vpn_user ;;
        2) delete_vpn_user ;;
        3) view_all_users ;;
        4) restart_vpn_services ;;
        5) fix_vpn_services ;;
        0)
            echo -e "${BLUE}👋 Goodbye!${NC}"
            exit 0
            ;;
        *)
            echo -e "${RED}⚠ Invalid option! Please select between 0-5.${NC}"
            sleep 1
            ;;
    esac
done
